// Mocks generated by Mockito 5.3.2 from annotations
// in widget_toolkit_qr/test/lib_qr_scanner/views/qr_scanner_page_golden_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i3;
import 'package:widget_toolkit_qr/src/lib_qr_scanner/blocs/qr_scanner_bloc.dart'
    as _i2;
import 'package:widget_toolkit_qr/src/lib_qr_scanner/services/qr_validation_service.dart'
    as _i6;
import 'package:widget_toolkit_qr/src/lib_qr_scanner/services/system_permissions_service.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQrScannerBlocEvents_0 extends _i1.SmartFake
    implements _i2.QrScannerBlocEvents {
  _FakeQrScannerBlocEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQrScannerBlocStates_1<T> extends _i1.SmartFake
    implements _i2.QrScannerBlocStates<T> {
  _FakeQrScannerBlocStates_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectableStream_2<T> extends _i1.SmartFake
    implements _i3.ConnectableStream<T> {
  _FakeConnectableStream_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SystemPermissionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSystemPermissionsService extends _i1.Mock
    implements _i4.SystemPermissionsService {
  MockSystemPermissionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> checkForCameraPermissions() => (super.noSuchMethod(
        Invocation.method(
          #checkForCameraPermissions,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> requestCameraPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestCameraPermission,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [QrValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrValidationService<T> extends _i1.Mock
    implements _i6.QrValidationService<T> {
  MockQrValidationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<T> validateQrCode(String? qrCode) => (super.noSuchMethod(
        Invocation.method(
          #validateQrCode,
          [qrCode],
        ),
        returnValue: _i5.Future<T>.value(null),
      ) as _i5.Future<T>);
}

/// A class which mocks [QrScannerBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrScannerBlocType<T> extends _i1.Mock
    implements _i2.QrScannerBlocType<T> {
  MockQrScannerBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QrScannerBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeQrScannerBlocEvents_0(
          this,
          Invocation.getter(#events),
        ),
      ) as _i2.QrScannerBlocEvents);
  @override
  _i2.QrScannerBlocStates<T> get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeQrScannerBlocStates_1<T>(
          this,
          Invocation.getter(#states),
        ),
      ) as _i2.QrScannerBlocStates<T>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QrScannerBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrScannerBlocEvents extends _i1.Mock
    implements _i2.QrScannerBlocEvents {
  MockQrScannerBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void validateQRCode(String? qrCode) => super.noSuchMethod(
        Invocation.method(
          #validateQRCode,
          [qrCode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void requestCameraPermission() => super.noSuchMethod(
        Invocation.method(
          #requestCameraPermission,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QrScannerBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrScannerBlocStates<T> extends _i1.Mock
    implements _i2.QrScannerBlocStates<T> {
  MockQrScannerBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<bool> get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);
  @override
  _i3.ConnectableStream<T?> get scannedValue => (super.noSuchMethod(
        Invocation.getter(#scannedValue),
        returnValue: _FakeConnectableStream_2<T?>(
          this,
          Invocation.getter(#scannedValue),
        ),
      ) as _i3.ConnectableStream<T?>);
  @override
  _i5.Stream<Exception?> get errors => (super.noSuchMethod(
        Invocation.getter(#errors),
        returnValue: _i5.Stream<Exception?>.empty(),
      ) as _i5.Stream<Exception?>);
  @override
  _i3.ConnectableStream<bool> get hasCameraPermission => (super.noSuchMethod(
        Invocation.getter(#hasCameraPermission),
        returnValue: _FakeConnectableStream_2<bool>(
          this,
          Invocation.getter(#hasCameraPermission),
        ),
      ) as _i3.ConnectableStream<bool>);
}
