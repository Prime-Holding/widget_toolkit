// Mocks generated by Mockito 5.3.2 from annotations
// in widget_toolkit_qr/test/mocks/qr_scanner_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i2;
import 'package:widget_toolkit/models.dart' as _i5;
import 'package:widget_toolkit_qr/src/lib_qr_scanner/blocs/qr_scanner_bloc.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectableStream_0<T> extends _i1.SmartFake
    implements _i2.ConnectableStream<T> {
  _FakeConnectableStream_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQrScannerBlocEvents_1 extends _i1.SmartFake
    implements _i3.QrScannerBlocEvents {
  _FakeQrScannerBlocEvents_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQrScannerBlocStates_2<T> extends _i1.SmartFake
    implements _i3.QrScannerBlocStates<T> {
  _FakeQrScannerBlocStates_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QrScannerBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrScannerBlocStates<T> extends _i1.Mock
    implements _i3.QrScannerBlocStates<T> {
  MockQrScannerBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<bool> get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);
  @override
  _i2.ConnectableStream<T?> get scannedValue => (super.noSuchMethod(
        Invocation.getter(#scannedValue),
        returnValue: _FakeConnectableStream_0<T?>(
          this,
          Invocation.getter(#scannedValue),
        ),
      ) as _i2.ConnectableStream<T?>);
  @override
  _i4.Stream<_i5.ErrorModel> get errors => (super.noSuchMethod(
        Invocation.getter(#errors),
        returnValue: _i4.Stream<_i5.ErrorModel>.empty(),
      ) as _i4.Stream<_i5.ErrorModel>);
  @override
  _i2.ConnectableStream<bool> get hasCameraPermission => (super.noSuchMethod(
        Invocation.getter(#hasCameraPermission),
        returnValue: _FakeConnectableStream_0<bool>(
          this,
          Invocation.getter(#hasCameraPermission),
        ),
      ) as _i2.ConnectableStream<bool>);
}

/// A class which mocks [QrScannerBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrScannerBlocEvents extends _i1.Mock
    implements _i3.QrScannerBlocEvents {
  MockQrScannerBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void validateQRCode(String? qrCode) => super.noSuchMethod(
        Invocation.method(
          #validateQRCode,
          [qrCode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void requestCameraPermission() => super.noSuchMethod(
        Invocation.method(
          #requestCameraPermission,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QrScannerBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrScannerBlocType<T> extends _i1.Mock
    implements _i3.QrScannerBlocType<T> {
  MockQrScannerBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.QrScannerBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeQrScannerBlocEvents_1(
          this,
          Invocation.getter(#events),
        ),
      ) as _i3.QrScannerBlocEvents);
  @override
  _i3.QrScannerBlocStates<T> get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeQrScannerBlocStates_2<T>(
          this,
          Invocation.getter(#states),
        ),
      ) as _i3.QrScannerBlocStates<T>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
