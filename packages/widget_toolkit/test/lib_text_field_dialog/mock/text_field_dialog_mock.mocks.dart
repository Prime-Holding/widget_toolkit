// Mocks generated by Mockito 5.3.2 from annotations
// in widget_toolkit/test/lib_text_field_dialog/mock/text_field_dialog_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rx_bloc/rx_bloc.dart' as _i4;
import 'package:widget_toolkit/src/lib_text_field_dialog/blocs/text_field_dialog_bloc.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextFieldDialogBlocEvents_0 extends _i1.SmartFake
    implements _i2.TextFieldDialogBlocEvents {
  _FakeTextFieldDialogBlocEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextFieldDialogBlocStates_1<T> extends _i1.SmartFake
    implements _i2.TextFieldDialogBlocStates<T> {
  _FakeTextFieldDialogBlocStates_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TextFieldDialogBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextFieldDialogBlocStates<T> extends _i1.Mock
    implements _i2.TextFieldDialogBlocStates<T> {
  MockTextFieldDialogBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Result<T>> get submittedValue => (super.noSuchMethod(
        Invocation.getter(#submittedValue),
        returnValue: _i3.Stream<_i4.Result<T>>.empty(),
      ) as _i3.Stream<_i4.Result<T>>);
  @override
  _i3.Stream<bool> get isErrorVisible => (super.noSuchMethod(
        Invocation.getter(#isErrorVisible),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);
  @override
  _i3.Stream<String> get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
}

/// A class which mocks [TextFieldDialogBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextFieldDialogBlocEvents extends _i1.Mock
    implements _i2.TextFieldDialogBlocEvents {
  MockTextFieldDialogBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setText(String? value) => super.noSuchMethod(
        Invocation.method(
          #setText,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void submit() => super.noSuchMethod(
        Invocation.method(
          #submit,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TextFieldDialogBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextFieldDialogBlocType extends _i1.Mock
    implements _i2.TextFieldDialogBlocType {
  MockTextFieldDialogBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextFieldDialogBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeTextFieldDialogBlocEvents_0(
          this,
          Invocation.getter(#events),
        ),
      ) as _i2.TextFieldDialogBlocEvents);
  @override
  _i2.TextFieldDialogBlocStates<dynamic> get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeTextFieldDialogBlocStates_1<dynamic>(
          this,
          Invocation.getter(#states),
        ),
      ) as _i2.TextFieldDialogBlocStates<dynamic>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
